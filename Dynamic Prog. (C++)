#include <iostream>
using namespace std;
// find minimum of three numbers
int min(int x, int y, int z)
{
    return min(min(x, y), z);
}
int editDistBF(string str1, string str2, int m, int n)
{
    if (m == 0)
        return n;
    if (n == 0)
        return m;
    if (str1[m - 1] == str2[n - 1])
        return editDistBF(str1, str2, m - 1, n - 1);
    return 1
        + min(editDistBF(str1, str2, m, n - 1), // Insert
}
    editDistBF(str1, str2, m - 1, n), // Remove
    editDistBF(str1, str2, m - 1, n - 1) // Replace
);
int editDistDP(string str1, string str2, int dp [][50], int m, int n)
{
    for (int i = 0; i <= m; i++) {
        for (int j = 0; j <= n; j++) {
            // If first string is empty, insert all characters of second
             string
            if (i == 0)
                dp[i][j] = j; // Min. operations = j
            // If second string is empty, remove all characters of second
             string
            else if (j == 0)
                dp[i][j] = i; // Min. operations = i
            // If last characters are same, recur for the remaining string
            else if (str1[i - 1] == str2[j - 1])
                dp[i][j] = dp[i - 1][j - 1];
            // If the last character is different,
            // consider all possibilities and find the minimum
            else
} }
    return dp[m][n];
}
dp[i][j] = 1 + min(dp[i][j - 1], // Insert
                   dp[i - 1][j], // Remove
                   dp[i - 1][j - 1]); // Replace

void print(string str1, string str2, int dp[][50], int m, int n)
{
        while(m != 0 && n != 0)
        {
} }
int main() {
if (str1[m-1] == str2[n-1])
{
m = m-1;
n = n-1; }
else if (dp[m][n] == dp[m-1][n-1] + 1)
{
    cout << "Replace " << str1[m-1] << " in string1 to " <<
    str2[n-1] << " in string2" << endl;
    m = m-1;
    n = n-1;
}
else if (dp[m][n] == dp[m-1][n] + 1)
{
    cout << "Remove in string1 " << str1[m-1] << endl;
m = m-1; }
else if (dp[m][n] == dp[m][n-1] + 1)
{
    cout << "Insert in string1 " << str2[n-1] << endl;
n = n-1; }
    string str1 = "cat";
    string str2 = "cake";
    int m = str1.length();
    int n = str2.length();
    int dp[50][50];
    cout << "Bruteforce result = " << editDistBF(str1, str2, m, n) << endl;
    cout << "Dynamic Programming result = " << editDistDP(str1, str2, dp,
     m, n) << endl;
    print (str1,str2,dp,m,n);
    return 0;
}
